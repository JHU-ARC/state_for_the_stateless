/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
    include "sgx_eid.h"
    include "generic_execution_types.h"
    include "proof_types.h"
    include "sgx_tseal.h"
    from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;
    from "sgx_tae_service.edl" import create_session_ocall, close_session_ocall, invoke_service_ocall;

    from "SysEnvironment/sgx_getopt.edl" import *;
    from "SysEnvironment/sgx_pwd.edl" import *;
    from "SysEnvironment/sgx_utsname.edl" import *;
    from "SysEnvironment/sgx_grp.edl" import *;
    from "SysEnvironment/sgx_time.edl" import *;
 
    from "IO/sgx_arpainet.edl" import *;
    from "IO/sgx_fcntl.edl" import *;
    from "IO/sgx_netinetin.edl" import *;
    from "IO/sgx_signal.edl" import *;
    from "IO/sgx_stdlib.edl" import *;
    from "IO/sgx_sysepoll.edl" import *;
    from "IO/sgx_sysioctl.edl" import *;
    from "IO/sgx_sysresource.edl" import *;
    from "IO/sgx_syssendfile.edl" import *;
    from "IO/sgx_sysstat.edl" import *;
    from "IO/sgx_syswait.edl" import *;
    from "IO/sgx_dirent.edl" import *;
    from "IO/sgx_netdb.edl" import *;
    from "IO/sgx_poll.edl" import *;
    from "IO/sgx_stdio.edl" import *;
    from "IO/sgx_sysctl.edl" import *;
    from "IO/sgx_syseventfd.edl" import *;
    from "IO/sgx_sysmman.edl" import *;
    from "IO/sgx_sysselect.edl" import *;
    from "IO/sgx_syssocket.edl" import *;
    from "IO/sgx_sysuio.edl" import *;
    from "IO/sgx_unistd.edl" import *;

    trusted {

        public void ecall_init(
                key_load_mode_t mode,
                [in, size=816] sgx_sealed_data_t* sealed_key_in, 
                [out, size=816] sgx_sealed_data_t* sealed_key_out, 
                [out] int* return_code
	);

        public void ecall_initial_step_blockchain(
                unsigned int counter,
		[in, size=next_step_input_size] uint8_t* next_step_input, size_t next_step_input_size,
		[in] commitment_randomness_t* commitment_randomness,
                [in] blockchain_proof_t* proof_struct, 
                [in, size=proof_buffer_size] uint8_t* proof_buffer, size_t proof_buffer_size,
		[in] input_from_ledger_t* input_from_ledger, 
                [in, size=javascript_program_size] char* javascript_program, size_t javascript_program_size,
		[out] state_ciphertext_t* next_state,
                [out] public_output_t* public_output,
		[out] step_output_t* step_output, 
		[out] int* return_code
        );

        public void ecall_next_step_blockchain(
                unsigned int counter,
		[in] state_ciphertext_t* previous_state, 
		[in, size=next_step_input_size] uint8_t* next_step_input, size_t next_step_input_size,
		[in] commitment_randomness_t* commitment_randomness,
                [in] blockchain_proof_t* proof_struct, 
                [in, size=proof_buffer_size] uint8_t* proof_buffer, size_t proof_buffer_size,
		[in] input_from_ledger_t* input_from_ledger, 
                [in, size=javascript_program_size] char* javascript_program, size_t javascript_program_size,
		[out] state_ciphertext_t* next_state,
                [out] public_output_t* public_output,
		[out] step_output_t* step_output, 
		[out] int* return_code
	);

        public void ecall_cleanup(
                [out] int* return_code

        );

    };  
};
